# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: Users Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /users:
    post:
      description: Endpoint for registration
      tags:
        - Users
      requestBody:
        $ref: "#/components/requestBodies/requestRegistration"
      responses:
        "201":
          $ref: "#/components/responses/responseRegistration"
        "400":
          $ref: "#/components/responses/responseErrorBadRequest"
        "409":
          $ref: "#/components/responses/responseErrorConflict"
        "500":
          $ref: "#/components/responses/responseErrorSystem"
  /users/login:
    post:
      description: Endpoint for login
      tags:
        - Users
      security:
        - basicAuth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
  /users/{id}:
    get:
      description: Endpoint for get user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
    put:
      description: Endpoint for update user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
  requestBodies:
    requestRegistration:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              phone_number:
                type: string
                example: "+62877823818829"
              full_name:
                type: string
                example: Rivaldy SBS
              password:
                type: string
                example: myPassword990
            required:
              - phone_number
              - full_name
              - password
  responses:
    responseRegistration:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 201
              message:
                type: string
                example: success
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 123
                  full_name:
                    type: string
                    example: "Rivaldy SBS"
                  phone_number:
                    type: string
                    example: "+6287700912310"
                required:
                  - id
                  - full_name
                  - phone_number
    responseSuccessOk:
      description: "Ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              message:
                type: string
                example: Success
              data:
                type: object
                example: null
    responseSuccessCreated:
      description: "Created"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 201
              message:
                type: string
                example: Success
              data:
                type: object
                example: null
    responseErrorNotFound:
      description: "Data not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 404
              message:
                type: string
                example: Data not found
              data:
                type: object
                example: null
    responseErrorConflict:
      description: "Data conflict"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 409
              message:
                type: string
                example: Data conflict
              data:
                type: object
                example: null
    responseErrorBadRequest:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: Please put correct value
              data:
                type: object
                example: null
    responseErrorUnauthorized:
      description: "Unauthorized access"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 401
              message:
                type: string
                example: Unauthorized
              data:
                type: object
                example: null
    responseErrorUnprocessable:
      description: "Unprocessable entity"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 422
              message:
                type: string
                example: Unprocessable entity
              data:
                type: object
                example: null
    responseErrorSystem:
      description: "Unexpected error"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              message:
                type: string
                example: Something when wrong
              data:
                type: object
                example: null
