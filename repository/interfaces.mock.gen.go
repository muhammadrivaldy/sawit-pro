// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	models "github.com/SawitProRecruitment/UserService/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// InsertUsers mocks base method.
func (m *MockRepositoryInterface) InsertUsers(ctx context.Context, user models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUsers", ctx, user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUsers indicates an expected call of InsertUsers.
func (mr *MockRepositoryInterfaceMockRecorder) InsertUsers(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUsers", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertUsers), ctx, user)
}

// SelectUsersById mocks base method.
func (m *MockRepositoryInterface) SelectUsersById(ctx context.Context, id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsersById", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsersById indicates an expected call of SelectUsersById.
func (mr *MockRepositoryInterfaceMockRecorder) SelectUsersById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsersById", reflect.TypeOf((*MockRepositoryInterface)(nil).SelectUsersById), ctx, id)
}

// SelectUsersByPhoneNumber mocks base method.
func (m *MockRepositoryInterface) SelectUsersByPhoneNumber(ctx context.Context, phoneNumber string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsersByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsersByPhoneNumber indicates an expected call of SelectUsersByPhoneNumber.
func (mr *MockRepositoryInterfaceMockRecorder) SelectUsersByPhoneNumber(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsersByPhoneNumber", reflect.TypeOf((*MockRepositoryInterface)(nil).SelectUsersByPhoneNumber), ctx, phoneNumber)
}

// UpdateUsers mocks base method.
func (m *MockRepositoryInterface) UpdateUsers(ctx context.Context, user models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsers", ctx, user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsers indicates an expected call of UpdateUsers.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateUsers(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsers", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateUsers), ctx, user)
}
