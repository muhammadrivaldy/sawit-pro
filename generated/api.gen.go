// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ResponseErrorBadRequest defines model for responseErrorBadRequest.
type ResponseErrorBadRequest struct {
	Code    *int                    `json:"code,omitempty"`
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// ResponseErrorConflict defines model for responseErrorConflict.
type ResponseErrorConflict struct {
	Code    *int                    `json:"code,omitempty"`
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// ResponseErrorForbidden defines model for responseErrorForbidden.
type ResponseErrorForbidden struct {
	Code    *int                    `json:"code,omitempty"`
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// ResponseErrorSystem defines model for responseErrorSystem.
type ResponseErrorSystem struct {
	Code    *int                    `json:"code,omitempty"`
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// ResponseSuccessOk defines model for responseSuccessOk.
type ResponseSuccessOk struct {
	Code    *int                    `json:"code,omitempty"`
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// PostUsersFormdataBody defines parameters for PostUsers.
type PostUsersFormdataBody struct {
	FullName    string `form:"full_name" json:"full_name"`
	Password    string `form:"password" json:"password"`
	PhoneNumber string `form:"phone_number" json:"phone_number"`
}

// PostUsersFormdataRequestBody defines body for PostUsers for application/x-www-form-urlencoded ContentType.
type PostUsersFormdataRequestBody PostUsersFormdataBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (POST /users/login)
	PostUsersLogin(ctx echo.Context) error

	// (GET /users/{id})
	GetUsersId(ctx echo.Context, id int) error

	// (PUT /users/{id})
	PutUsersId(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// PostUsersLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersLogin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersLogin(ctx)
	return err
}

// GetUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersId(ctx, id)
	return err
}

// PutUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.POST(baseURL+"/users/login", wrapper.PostUsersLogin)
	router.GET(baseURL+"/users/:id", wrapper.GetUsersId)
	router.PUT(baseURL+"/users/:id", wrapper.PutUsersId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWUW/bNhD+KwK3t8mVbLer7bel64YAGxrE61MQFDR5lphIJHek4hiB//tAUokl2YkT",
	"R9vy0Df5zDved/fdfbwjTJVaSZDWkNkdQfi7AmNPFBfQNJxDJoxFaoWSzsyUtCCt+6RaF4L5f5LbwWq1",
	"GiwVloMKC5BMceDukGE5lNR9aVQa0Nbhl1VRfJO0BPcDbmmpCyAzci5uaMHX0fxkTmJi19oZjUUhM7KJ",
	"iabGrBTytlO5Pqvt02m61y1XEr7JqlwAtl1/+nk0+fhxMhpPhpPJaLrrvIl9JQQ6OBftSHEDRSO3y4cg",
	"anEFzJJNO4rFCoLFaCXNfbnDj8+ICk8oPw/lf6LkVyZ05LEKuxa0wL5P04fMhLSQAbricGq9dyfnmJRg",
	"DM06DeJgqSgicGlGK1EU0QIiDoahWACPckDYW8Q9FQleOjCLnFAe1ZwjjeL4enxSclkI1nM1pj1Ug1oa",
	"sfvsjsL9aytEF/lvCheCc5D9Qh+/HvryIbOjYG+BdSHP18ZC2SfeD30Q36gSbC5kFq1ykNEKlcyOg/5V",
	"wq0GZoGHMWpWYF4xBsZ8ue4T/6gX/CGz4yB/ufbnDLAKhV3PXeYh2QU1gv1S2fwBkYvkrdurcmu1S2wB",
	"FAF3T3tz97i7UMilckcLwUAajyhoDvnz9C8X0Qrr0X01gCaaA94I5hbYDaAJqQ/fpe9Sd1RpkFQLMiNj",
	"b3Ib3+YeRFI5d98JFXZ2G/5nybUS0kZLhRE2FdWHDd+nnMzImTLW50LihiSvXcgfEZZkRn5ItsKdtFQ7",
	"2SfZXZ0ZpcN+qTV8ilp9aL5oq/1wtHd5HZL4NJ0OR+NhelDhBe/qejPyrrb/G+NSbwEX/H2aPt78uq/J",
	"Y48H7z99of+nhhZ9ePHt9fZuTjuZXbiy0cy4+gZ2X7oDYWySQmVCPnN4wtlHp+aP+u8O5dP/cJu2va26",
	"Dtq9ZcZaVTjw9sHV6lmPhjdOsb5I0hKDi8vNk6S5E3zjbs3gEGUysJHz2WHN7xBIc8r9LkdagvVr/OKO",
	"OEL6/U7ie8Xwi6H9io8brHl6QTkwb4aU3/fwMUMyfiHJWy/cV81IdwpioqtDrK80pxb2E/+s+v+J/7xK",
	"bJ/DvUjh22nh7uprPG3D7jOAN/ddqbCo37WzJCkUo0XutHJzufknAAD//5unS2HIEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
